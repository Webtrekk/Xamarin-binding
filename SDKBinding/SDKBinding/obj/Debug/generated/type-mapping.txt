org/koin/core/bean/BeanRegistry = Org.Koin.Core.Bean.BeanRegistry
  <init>()V = .ctor()
  getDefinitions()Ljava/util/HashSet; = Definitions
  clear()V = Clear()
  declare(Lorg/koin/dsl/definition/BeanDefinition;)V = Declare(Org.Koin.Dsl.Definition.BeanDefinition)
org/koin/core/instance/holder/FactoryInstanceHolder = Org.Koin.Core.Instance.Holder.FactoryInstanceHolder
  <init>(Lorg/koin/dsl/definition/BeanDefinition;)V = .ctor(Org.Koin.Dsl.Definition.BeanDefinition)
  getBean()Lorg/koin/dsl/definition/BeanDefinition; = Bean
  release()V = Release()
org/koin/core/instance/holder/Instance = Org.Koin.Core.Instance.Holder.Instance
  <init>(Ljava/lang/Object;Z)V = .ctor(Java.Lang.Object, bool)
  getCreated()Z = Created
  getValue()Ljava/lang/Object; = Value
  component1()Ljava/lang/Object; = Component1()
  component2()Z = Component2()
  copy(Ljava/lang/Object;Z)Lorg/koin/core/instance/holder/Instance; = Copy(Java.Lang.Object, bool)
org/koin/core/instance/holder/InstanceHolder = Org.Koin.Core.Instance.Holder.IInstanceHolder
  getBean()Lorg/koin/dsl/definition/BeanDefinition; = Bean
  release()V = Release()
org/koin/core/instance/holder/ScopeInstanceHolder = Org.Koin.Core.Instance.Holder.ScopeInstanceHolder
  <init>(Lorg/koin/dsl/definition/BeanDefinition;Lorg/koin/core/scope/Scope;)V = .ctor(Org.Koin.Dsl.Definition.BeanDefinition, Org.Koin.Core.Scope.Scope)
  getBean()Lorg/koin/dsl/definition/BeanDefinition; = Bean
  getScope()Lorg/koin/core/scope/Scope; = Scope
  release()V = Release()
org/koin/core/instance/holder/SingleInstanceHolder = Org.Koin.Core.Instance.Holder.SingleInstanceHolder
  <init>(Lorg/koin/dsl/definition/BeanDefinition;)V = .ctor(Org.Koin.Dsl.Definition.BeanDefinition)
  getBean()Lorg/koin/dsl/definition/BeanDefinition; = Bean
  getInstance()Ljava/lang/Object; = Instance
  setInstance(Ljava/lang/Object;)V = Instance
  release()V = Release()
org/koin/core/instance/InstanceFactory = Org.Koin.Core.Instance.InstanceFactory
  <init>()V = .ctor()
  getCallbacks()Ljava/util/ArrayList; = Callbacks
  getInstances()Ljava/util/ArrayList; = Instances
  clear()V = Clear()
  create(Lorg/koin/dsl/definition/BeanDefinition;Lorg/koin/core/scope/Scope;)Lorg/koin/core/instance/holder/InstanceHolder; = Create(Org.Koin.Dsl.Definition.BeanDefinition, Org.Koin.Core.Scope.Scope)
  delete(Lorg/koin/dsl/definition/BeanDefinition;)V = Delete(Org.Koin.Dsl.Definition.BeanDefinition)
  find(Lorg/koin/dsl/definition/BeanDefinition;Lorg/koin/core/scope/Scope;)Lorg/koin/core/instance/holder/InstanceHolder; = Find(Org.Koin.Dsl.Definition.BeanDefinition, Org.Koin.Core.Scope.Scope)
  register(Lorg/koin/core/instance/ModuleCallBack;)V = Register(Org.Koin.Core.Instance.IModuleCallBack)
  release(Lorg/koin/dsl/definition/BeanDefinition;Lorg/koin/core/scope/Scope;)V = Release(Org.Koin.Dsl.Definition.BeanDefinition, Org.Koin.Core.Scope.Scope)
  releasePath(Lorg/koin/dsl/path/Path;)V = ReleasePath(Org.Koin.Dsl.Path.Path)
org/koin/core/instance/InstanceRegistry = Org.Koin.Core.Instance.InstanceRegistry
  <init>(Lorg/koin/core/bean/BeanRegistry;Lorg/koin/core/instance/InstanceFactory;Lorg/koin/core/path/PathRegistry;Lorg/koin/core/scope/ScopeRegistry;)V = .ctor(Org.Koin.Core.Bean.BeanRegistry, Org.Koin.Core.Instance.InstanceFactory, Org.Koin.Core.Path.PathRegistry, Org.Koin.Core.Scope.ScopeRegistry)
  getBeanRegistry()Lorg/koin/core/bean/BeanRegistry; = BeanRegistry
  getInstanceFactory()Lorg/koin/core/instance/InstanceFactory; = InstanceFactory
  getPathRegistry()Lorg/koin/core/path/PathRegistry; = PathRegistry
  close()V = Close()
  resolve(Lorg/koin/core/instance/InstanceRequest;)Ljava/lang/Object; = Resolve(Org.Koin.Core.Instance.InstanceRequest)
org/koin/core/instance/InstanceRequest = Org.Koin.Core.Instance.InstanceRequest
  getName()Ljava/lang/String; = Name
  getScope()Lorg/koin/core/scope/Scope; = Scope
  component1()Ljava/lang/String; = Component1()
  component3()Lorg/koin/core/scope/Scope; = Component3()
org/koin/core/instance/ModuleCallBack = Org.Koin.Core.Instance.IModuleCallBack
  onRelease(Ljava/lang/String;)V = OnRelease(string)
org/koin/core/instance/ResolutionRequest = Org.Koin.Core.Instance.ResolutionRequest
org/koin/core/Koin = Org.Koin.Core.Koin
  Companion = Companion
  getBeanRegistry()Lorg/koin/core/bean/BeanRegistry; = BeanRegistry
  getInstanceFactory()Lorg/koin/core/instance/InstanceFactory; = InstanceFactory
  getKoinContext()Lorg/koin/core/KoinContext; = KoinContext
  getPathRegistry()Lorg/koin/core/path/PathRegistry; = PathRegistry
  getPropertyResolver()Lorg/koin/core/property/PropertyRegistry; = PropertyResolver
  close()V = Close()
  declare(Lorg/koin/dsl/definition/BeanDefinition;)V = Declare(Org.Koin.Dsl.Definition.BeanDefinition)
  loadExtraProperties(Ljava/util/Map;)Lorg/koin/core/Koin; = LoadExtraProperties(System.Collections.Generic.IDictionary<string, Java.Lang.Object>)
  loadProperties(Lorg/koin/core/KoinProperties;)Lorg/koin/core/Koin; = LoadProperties(Org.Koin.Core.KoinProperties)
  registerModuleCallBack(Lorg/koin/core/instance/ModuleCallBack;)V = RegisterModuleCallBack(Org.Koin.Core.Instance.IModuleCallBack)
  registerScopeCallback(Lorg/koin/core/scope/ScopeCallback;)V = RegisterScopeCallback(Org.Koin.Core.Scope.IScopeCallback)
org/koin/core/KoinContext = Org.Koin.Core.KoinContext
  Companion = Companion
  getInstanceRegistry()Lorg/koin/core/instance/InstanceRegistry; = InstanceRegistry
  getPropertyResolver()Lorg/koin/core/property/PropertyRegistry; = PropertyResolver
  getScopeRegistry()Lorg/koin/core/scope/ScopeRegistry; = ScopeRegistry
  close()V = Close()
  createScope(Ljava/lang/String;)Lorg/koin/core/scope/Scope; = CreateScope(string)
  detachScope(Ljava/lang/String;)Lorg/koin/core/scope/Scope; = DetachScope(string)
  getDetachedScope(Ljava/lang/String;)Lorg/koin/core/scope/Scope; = GetDetachedScope(string)
  getOrCreateScope(Ljava/lang/String;)Lorg/koin/core/scope/Scope; = GetOrCreateScope(string)
  getProperty(Ljava/lang/String;)Ljava/lang/Object; = GetProperty(string)
  getProperty(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object; = GetProperty(string, Java.Lang.Object)
  getScope(Ljava/lang/String;)Lorg/koin/core/scope/Scope; = GetScope(string)
  release(Ljava/lang/String;)V = Release(string)
  setProperty(Ljava/lang/String;Ljava/lang/Object;)V = SetProperty(string, Java.Lang.Object)
org/koin/core/KoinProperties = Org.Koin.Core.KoinProperties
  <init>()V = .ctor()
  <init>(ZZLjava/util/Map;)V = .ctor(bool, bool, System.Collections.Generic.IDictionary<string, Java.Lang.Object>)
  getExtraProperties()Ljava/util/Map; = ExtraProperties
  getUseEnvironmentProperties()Z = UseEnvironmentProperties
  getUseKoinPropertiesFile()Z = UseKoinPropertiesFile
  component1()Z = Component1()
  component2()Z = Component2()
  component3()Ljava/util/Map; = Component3()
  copy(ZZLjava/util/Map;)Lorg/koin/core/KoinProperties; = Copy(bool, bool, System.Collections.Generic.IDictionary<string, Java.Lang.Object>)
org/koin/core/parameter/ParameterList = Org.Koin.Core.Parameter.ParameterList
  <init>([Ljava/lang/Object;)V = .ctor(params Java.Lang.Object[])
  getValues()Ljava/util/List; = Values
  component1()Ljava/lang/Object; = Component1()
  component2()Ljava/lang/Object; = Component2()
  component3()Ljava/lang/Object; = Component3()
  component4()Ljava/lang/Object; = Component4()
  component5()Ljava/lang/Object; = Component5()
  get(I)Ljava/lang/Object; = Get(int)
org/koin/core/parameter/ParameterListKt = Org.Koin.Core.Parameter.ParameterListKt
  parametersOf([Ljava/lang/Object;)Lorg/koin/core/parameter/ParameterList; = ParametersOf(params Java.Lang.Object[])
org/koin/core/path/PathRegistry = Org.Koin.Core.Path.PathRegistry
  <init>()V = .ctor()
  getPaths()Ljava/util/HashSet; = Paths
  clear()V = Clear()
  getAllPathsFrom(Ljava/lang/String;)Ljava/util/Set; = GetAllPathsFrom(string)
  getPath(Ljava/lang/String;)Lorg/koin/dsl/path/Path; = GetPath(string)
  makePath(Ljava/lang/String;Ljava/lang/String;)Lorg/koin/dsl/path/Path; = MakePath(string, string)
  savePath(Lorg/koin/dsl/path/Path;)V = SavePath(Org.Koin.Dsl.Path.Path)
org/koin/core/property/PropertyRegistry = Org.Koin.Core.Property.PropertyRegistry
  <init>()V = .ctor()
  getProperties()Ljava/util/HashMap; = Properties
  add(Ljava/lang/String;Ljava/lang/Object;)V = Add(string, Java.Lang.Object)
  addAll(Ljava/util/Map;)V = AddAll(System.Collections.Generic.IDictionary<string, Java.Lang.Object>)
  clear()V = Clear()
  containsKey(Ljava/lang/String;)Z = ContainsKey(string)
  delete(Ljava/lang/String;)V = Delete(string)
  deleteAll([Ljava/lang/String;)V = DeleteAll(string[])
  getProperty(Ljava/lang/String;)Ljava/lang/Object; = GetProperty(string)
  getProperty(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object; = GetProperty(string, Java.Lang.Object)
  getValue(Ljava/lang/String;)Ljava/lang/Object; = GetValue(string)
  import(Ljava/util/Properties;)I = Import(Java.Util.Properties)
org/koin/core/scope/BeanDefinitionExtKt = Org.Koin.Core.Scope.BeanDefinitionExtKt
  getScope(Lorg/koin/dsl/definition/BeanDefinition;)Ljava/lang/String; = GetScope(Org.Koin.Dsl.Definition.BeanDefinition)
  isAddedToScope(Lorg/koin/dsl/definition/BeanDefinition;)Z = IsAddedToScope(Org.Koin.Dsl.Definition.BeanDefinition)
  isVisibleToScope(Lorg/koin/dsl/definition/BeanDefinition;Lorg/koin/core/scope/Scope;)Z = IsVisibleToScope(Org.Koin.Dsl.Definition.BeanDefinition, Org.Koin.Core.Scope.Scope)
  setAddedToScope(Lorg/koin/dsl/definition/BeanDefinition;)V = SetAddedToScope(Org.Koin.Dsl.Definition.BeanDefinition)
  setScope(Lorg/koin/dsl/definition/BeanDefinition;Ljava/lang/String;)V = SetScope(Org.Koin.Dsl.Definition.BeanDefinition, string)
org/koin/core/scope/Scope = Org.Koin.Core.Scope.Scope
  <init>(Ljava/lang/String;Ljava/lang/String;Z)V = .ctor(string, string, bool)
  getId()Ljava/lang/String; = Id
  isDetached()Z = IsDetached
  getParameters()Ljava/util/HashMap; = Parameters
  getUuid()Ljava/lang/String; = Uuid
  close()V = Close()
  component1()Ljava/lang/String; = Component1()
  component2()Ljava/lang/String; = Component2()
  component3()Z = Component3()
  copy(Ljava/lang/String;Ljava/lang/String;Z)Lorg/koin/core/scope/Scope; = Copy(string, string, bool)
org/koin/core/scope/ScopeCallback = Org.Koin.Core.Scope.IScopeCallback
  onClose(Ljava/lang/String;Ljava/lang/String;)V = OnClose(string, string)
org/koin/core/scope/ScopeRegistry = Org.Koin.Core.Scope.ScopeRegistry
  <init>()V = .ctor()
  close()V = Close()
  createAndDetachScope(Ljava/lang/String;)Lorg/koin/core/scope/Scope; = CreateAndDetachScope(string)
  createScope(Ljava/lang/String;)Lorg/koin/core/scope/Scope; = CreateScope(string)
  deleteScope(Ljava/lang/String;Ljava/lang/String;)V = DeleteScope(string, string)
  getDetachScope(Ljava/lang/String;)Lorg/koin/core/scope/Scope; = GetDetachScope(string)
  getOrCreateScope(Ljava/lang/String;)Lorg/koin/core/scope/Scope; = GetOrCreateScope(string)
  getScope(Ljava/lang/String;)Lorg/koin/core/scope/Scope; = GetScope(string)
  register(Lorg/koin/core/scope/ScopeCallback;)V = Register(Org.Koin.Core.Scope.IScopeCallback)
org/koin/core/stack/ResolutionStack = Org.Koin.Core.Stack.ResolutionStack
  <init>()V = .ctor()
  isEmpty()Z = IsEmpty
  clear()V = Clear()
  indent()Ljava/lang/String; = Indent()
  last()Lorg/koin/dsl/definition/BeanDefinition; = Last()
org/koin/core/stack/ResolutionStackKt = Org.Koin.Core.Stack.ResolutionStackKt
org/koin/core/time/DurationKt = Org.Koin.Core.Time.DurationKt
org/koin/dsl/context/ModuleDefinition = Org.Koin.Dsl.Context.ModuleDefinition
  <init>(Ljava/lang/String;ZZLorg/koin/core/KoinContext;)V = .ctor(string, bool, bool, Org.Koin.Core.KoinContext)
  getCreateOnStart()Z = CreateOnStart
  getDefinitions()Ljava/util/ArrayList; = Definitions
  getKoinContext()Lorg/koin/core/KoinContext; = KoinContext
  getOverride()Z = Override
  getPath()Ljava/lang/String; = Path
  getSubModules()Ljava/util/ArrayList; = SubModules
org/koin/dsl/definition/BeanDefinition = Org.Koin.Dsl.Definition.BeanDefinition
  getAllowOverride()Z = AllowOverride
  getAttributes()Ljava/util/HashMap; = Attributes
  isEager()Z = IsEager
  getKind()Lorg/koin/dsl/definition/Kind; = Kind
  getName()Ljava/lang/String; = Name
  getPath()Lorg/koin/dsl/path/Path; = Path
  component1()Ljava/lang/String; = Component1()
  component4()Lorg/koin/dsl/path/Path; = Component4()
  component5()Lorg/koin/dsl/definition/Kind; = Component5()
  component6()Z = Component6()
  component7()Z = Component7()
  component8()Ljava/util/HashMap; = Component8()
  isVisible(Lorg/koin/dsl/definition/BeanDefinition;)Z = IsVisible(Org.Koin.Dsl.Definition.BeanDefinition)
org/koin/dsl/definition/BeanDefinitionKt = Org.Koin.Dsl.Definition.BeanDefinitionKt
org/koin/dsl/definition/Kind = Org.Koin.Dsl.Definition.Kind
  <init>(Ljava/lang/String;I)V = .ctor(string, int)
  Factory = Factory
  Scope = Scope
  Single = Single
  valueOf(Ljava/lang/String;)Lorg/koin/dsl/definition/Kind; = ValueOf(string)
  values()[Lorg/koin/dsl/definition/Kind; = Values()
org/koin/dsl/module/ModuleKt = Org.Koin.Dsl.Module.ModuleKt
org/koin/dsl/path/Path = Org.Koin.Dsl.Path.Path
  <init>(Ljava/lang/String;Lorg/koin/dsl/path/Path;)V = .ctor(string, Org.Koin.Dsl.Path.Path)
  Companion = Companion
  ROOT = Root
  getName()Ljava/lang/String; = Name
  getParent()Lorg/koin/dsl/path/Path; = Parent
  component1()Ljava/lang/String; = Component1()
  component2()Lorg/koin/dsl/path/Path; = Component2()
  copy(Ljava/lang/String;Lorg/koin/dsl/path/Path;)Lorg/koin/dsl/path/Path; = Copy(string, Org.Koin.Dsl.Path.Path)
  isVisible(Lorg/koin/dsl/path/Path;)Z = IsVisible(Org.Koin.Dsl.Path.Path)
org/koin/error/AlreadyStartedException = Org.Koin.Error.AlreadyStartedException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
org/koin/error/BadPathException = Org.Koin.Error.BadPathException
  <init>(Ljava/lang/String;)V = .ctor(string)
org/koin/error/BeanInstanceCreationException = Org.Koin.Error.BeanInstanceCreationException
  <init>(Ljava/lang/String;)V = .ctor(string)
org/koin/error/BeanOverrideException = Org.Koin.Error.BeanOverrideException
  <init>(Ljava/lang/String;)V = .ctor(string)
org/koin/error/ClosedScopeException = Org.Koin.Error.ClosedScopeException
  <init>(Ljava/lang/String;)V = .ctor(string)
org/koin/error/DefinitionBindingException = Org.Koin.Error.DefinitionBindingException
  <init>(Ljava/lang/String;)V = .ctor(string)
org/koin/error/DependencyResolutionException = Org.Koin.Error.DependencyResolutionException
  <init>(Ljava/lang/String;)V = .ctor(string)
org/koin/error/MissingPropertyException = Org.Koin.Error.MissingPropertyException
  <init>(Ljava/lang/String;)V = .ctor(string)
org/koin/error/NoBeanDefFoundException = Org.Koin.Error.NoBeanDefFoundException
  <init>(Ljava/lang/String;)V = .ctor(string)
org/koin/error/NoParameterFoundException = Org.Koin.Error.NoParameterFoundException
  <init>(Ljava/lang/String;)V = .ctor(string)
org/koin/error/NoScopeException = Org.Koin.Error.NoScopeException
  <init>(Ljava/lang/String;)V = .ctor(string)
org/koin/error/NoScopeFoundException = Org.Koin.Error.NoScopeFoundException
  <init>(Ljava/lang/String;)V = .ctor(string)
org/koin/error/NotVisibleException = Org.Koin.Error.NotVisibleException
  <init>(Ljava/lang/String;)V = .ctor(string)
org/koin/error/ScopeAlreadyExistsException = Org.Koin.Error.ScopeAlreadyExistsException
  <init>(Ljava/lang/String;)V = .ctor(string)
org/koin/ext/KClassExtKt = Org.Koin.Ext.KClassExtKt
org/koin/ext/StringExtKt = Org.Koin.Ext.StringExtKt
  castValue(Ljava/lang/String;)Ljava/lang/Object; = CastValue(string)
  checkedStringValue(Ljava/lang/Object;)Ljava/lang/Object; = CheckedStringValue(Java.Lang.Object)
  isFloat(Ljava/lang/String;)Z = IsFloat(string)
  isInt(Ljava/lang/String;)Z = IsInt(string)
org/koin/log/EmptyLogger = Org.Koin.Log.EmptyLogger
  <init>()V = .ctor()
  debug(Ljava/lang/String;)V = Debug(string)
  err(Ljava/lang/String;)V = Err(string)
  info(Ljava/lang/String;)V = Info(string)
org/koin/log/Logger = Org.Koin.Log.ILogger
  debug(Ljava/lang/String;)V = Debug(string)
  err(Ljava/lang/String;)V = Err(string)
  info(Ljava/lang/String;)V = Info(string)
org/koin/log/PrintLogger = Org.Koin.Log.PrintLogger
  <init>()V = .ctor()
  <init>(Z)V = .ctor(bool)
  debug(Ljava/lang/String;)V = Debug(string)
  err(Ljava/lang/String;)V = Err(string)
  info(Ljava/lang/String;)V = Info(string)
org/koin/standalone/KoinComponent = Org.Koin.Standalone.IKoinComponent
  getKoin()Lorg/koin/core/KoinContext; = Koin
org/koin/standalone/KoinComponentKt = Org.Koin.Standalone.KoinComponentKt
  release(Lorg/koin/standalone/KoinComponent;Ljava/lang/String;)V = Release(Org.Koin.Standalone.IKoinComponent, string)
  releaseContext(Lorg/koin/standalone/KoinComponent;Ljava/lang/String;)V = ReleaseContext(Org.Koin.Standalone.IKoinComponent, string)
  setProperty(Lorg/koin/standalone/KoinComponent;Ljava/lang/String;Ljava/lang/Object;)V = SetProperty(Org.Koin.Standalone.IKoinComponent, string, Java.Lang.Object)
org/koin/standalone/StandAloneContext = Org.Koin.Standalone.StandAloneContext
  INSTANCE = Instance
  getKoin()Lorg/koin/core/Koin; = Koin
  closeKoin()V = CloseKoin()
  registerModuleCallBack(Lorg/koin/core/instance/ModuleCallBack;)V = RegisterModuleCallBack(Org.Koin.Core.Instance.IModuleCallBack)
  registerScopeCallback(Lorg/koin/core/scope/ScopeCallback;)V = RegisterScopeCallback(Org.Koin.Core.Scope.IScopeCallback)
  setup(Lorg/koin/core/Koin;)V = Setup(Org.Koin.Core.Koin)
  stopKoin()V = StopKoin()
org/koin/standalone/StandAloneKoinContext = Org.Koin.Standalone.IStandAloneKoinContext
webtrekk/android/sdk/annotation/StopTrack = Webtrekk.Android.Sdk.Annotation.IStopTrack
webtrekk/android/sdk/annotation/Track = Webtrekk.Android.Sdk.Annotation.ITrack
  contextName()Ljava/lang/String; = ContextName()
  trackingParams()[Lwebtrekk/android/sdk/annotation/TrackParams; = TrackingParams()
webtrekk/android/sdk/annotation/TrackParams = Webtrekk.Android.Sdk.Annotation.ITrackParams
  paramKey()Ljava/lang/String; = ParamKey()
  paramVal()Ljava/lang/String; = ParamVal()
webtrekk/android/sdk/api/datasource/SyncRequestsDataSource = Webtrekk.Android.Sdk.Api.Datasource.ISyncRequestsDataSource
webtrekk/android/sdk/api/datasource/SyncRequestsDataSourceImpl = Webtrekk.Android.Sdk.Api.Datasource.SyncRequestsDataSourceImpl
webtrekk/android/sdk/api/RequestType = Webtrekk.Android.Sdk.Api.RequestType
  EVENT = Event
  PAGE = Page
  getValue()Ljava/lang/String; = Value
  valueOf(Ljava/lang/String;)Lwebtrekk/android/sdk/api/RequestType; = ValueOf(string)
  values()[Lwebtrekk/android/sdk/api/RequestType; = Values()
webtrekk/android/sdk/api/UrlParams = Webtrekk.Android.Sdk.Api.UrlParams
  APP_FIRST_OPEN = AppFirstOpen
  EVENT_NAME = EventName
  EVER_ID = EverId
  FORCE_NEW_SESSION = ForceNewSession
  INSTANCE = Instance
  LANGUAGE = Language
  TIME_ZONE = TimeZone
  USER_AGENT = UserAgent
  WEBTREKK_PARAM = WebtrekkParam
  getANDROID_API_LEVEL()Ljava/lang/String; = ANDROID_API_LEVEL
  getAPP_UPDATED()Ljava/lang/String; = APP_UPDATED
  getAPP_VERSION_CODE()Ljava/lang/String; = APP_VERSION_CODE
  getAPP_VERSION_NAME()Ljava/lang/String; = APP_VERSION_NAME
webtrekk/android/sdk/BuildConfig = Webtrekk.Android.Sdk.BuildConfig
  <init>()V = .ctor()
  APPLICATION_ID = ApplicationId
  BUILD_TYPE = BuildType
  DEBUG = Debug
  FLAVOR = Flavor
  VERSION_CODE = VersionCode
  VERSION_NAME = VersionName
webtrekk/android/sdk/Config = Webtrekk.Android.Sdk.IConfig
  getAutoTracking()Z = AutoTracking
  getFragmentsAutoTracking()Z = FragmentsAutoTracking
  getLogLevel()Lwebtrekk/android/sdk/Logger$Level; = LogLevel
  getRequestsInterval()J = RequestsInterval
  getTrackDomain()Ljava/lang/String; = TrackDomain
  getTrackIds()Ljava/util/List; = TrackIds
webtrekk/android/sdk/core/LifecycleReceiver = Webtrekk.Android.Sdk.Core.ILifecycleReceiver
  onLifecycleEventReceived(Ljava/lang/Object;)V = OnLifecycleEventReceived(Java.Lang.Object)
webtrekk/android/sdk/core/Scheduler = Webtrekk.Android.Sdk.Core.IScheduler
  cancelScheduleSendRequests()V = CancelScheduleSendRequests()
  scheduleCleanUp()V = ScheduleCleanUp()
  sendRequestsThenCleanUp()V = SendRequestsThenCleanUp()
webtrekk/android/sdk/core/SchedulerImpl = Webtrekk.Android.Sdk.Core.SchedulerImpl
  Companion = Companion
  SEND_REQUESTS_WORKER = SendRequestsWorker
  cancelScheduleSendRequests()V = CancelScheduleSendRequests()
  scheduleCleanUp()V = ScheduleCleanUp()
  sendRequestsThenCleanUp()V = SendRequestsThenCleanUp()
webtrekk/android/sdk/core/Sessions = Webtrekk.Android.Sdk.Core.ISessions
  getAppFirstOpen()Ljava/lang/String; = AppFirstOpen
  getCurrentSession()Ljava/lang/String; = CurrentSession
  getEverId()Ljava/lang/String; = EverId
  isOptOut()Z = IsOptOut
  isAppUpdated(Ljava/lang/String;)Z = IsAppUpdated(string)
  optOut(Z)V = OptOut(bool)
  setEverId()V = SetEverId()
  startNewSession()V = StartNewSession()
webtrekk/android/sdk/core/SessionsImpl = Webtrekk.Android.Sdk.Core.SessionsImpl
  <init>(Lwebtrekk/android/sdk/data/WebtrekkSharedPrefs;)V = .ctor(Webtrekk.Android.Sdk.Data.WebtrekkSharedPrefs)
  getAppFirstOpen()Ljava/lang/String; = AppFirstOpen
  getCurrentSession()Ljava/lang/String; = CurrentSession
  getEverId()Ljava/lang/String; = EverId
  isOptOut()Z = IsOptOut
  isAppUpdated(Ljava/lang/String;)Z = IsAppUpdated(string)
  optOut(Z)V = OptOut(bool)
  setEverId()V = SetEverId()
  startNewSession()V = StartNewSession()
webtrekk/android/sdk/core/WebtrekkLogger = Webtrekk.Android.Sdk.Core.WebtrekkLogger
  <init>(Lwebtrekk/android/sdk/Logger$Level;)V = .ctor(Webtrekk.Android.Sdk.LoggerLevel)
  Companion = Companion
  debug(Ljava/lang/String;)V = Debug(string)
  error(Ljava/lang/String;)V = Error(string)
  info(Ljava/lang/String;)V = Info(string)
  warn(Ljava/lang/String;)V = Warn(string)
webtrekk/android/sdk/data/converter/RequestStateConverter = Webtrekk.Android.Sdk.Data.Converter.RequestStateConverter
  <init>()V = .ctor()
  requestStateToString(Lwebtrekk/android/sdk/data/entity/TrackRequest$RequestState;)Ljava/lang/String; = RequestStateToString(Webtrekk.Android.Sdk.Data.Entity.TrackRequest.RequestState)
  stringToRequestState(Ljava/lang/String;)Lwebtrekk/android/sdk/data/entity/TrackRequest$RequestState; = StringToRequestState(string)
webtrekk/android/sdk/data/dao/CustomParamDao = Webtrekk.Android.Sdk.Data.Dao.ICustomParamDao
webtrekk/android/sdk/data/dao/CustomParamDao_Impl = Webtrekk.Android.Sdk.Data.Dao.CustomParamDao_Impl
webtrekk/android/sdk/data/dao/TrackRequestDao = Webtrekk.Android.Sdk.Data.Dao.ITrackRequestDao
webtrekk/android/sdk/data/dao/TrackRequestDao_Impl = Webtrekk.Android.Sdk.Data.Dao.TrackRequestDao_Impl
webtrekk/android/sdk/data/entity/CustomParam = Webtrekk.Android.Sdk.Data.Entity.CustomParam
  <init>(JJLjava/lang/String;Ljava/lang/String;)V = .ctor(long, long, string, string)
  getCustomParamId()J = CustomParamId
  setCustomParamId(J)V = CustomParamId
  getParamKey()Ljava/lang/String; = ParamKey
  getParamValue()Ljava/lang/String; = ParamValue
  getTrackId()J = TrackId
  component1()J = Component1()
  component2()J = Component2()
  component3()Ljava/lang/String; = Component3()
  component4()Ljava/lang/String; = Component4()
  copy(JJLjava/lang/String;Ljava/lang/String;)Lwebtrekk/android/sdk/data/entity/CustomParam; = Copy(long, long, string, string)
webtrekk/android/sdk/data/entity/DataTrack = Webtrekk.Android.Sdk.Data.Entity.DataTrack
  <init>(Lwebtrekk/android/sdk/data/entity/TrackRequest;Ljava/util/List;)V = .ctor(Webtrekk.Android.Sdk.Data.Entity.TrackRequest, System.Collections.Generic.IList<Webtrekk.Android.Sdk.Data.Entity.CustomParam>)
  getCustomParams()Ljava/util/List; = CustomParams
  setCustomParams(Ljava/util/List;)V = CustomParams
  getTrackRequest()Lwebtrekk/android/sdk/data/entity/TrackRequest; = TrackRequest
  setTrackRequest(Lwebtrekk/android/sdk/data/entity/TrackRequest;)V = TrackRequest
  component1()Lwebtrekk/android/sdk/data/entity/TrackRequest; = Component1()
  component2()Ljava/util/List; = Component2()
  copy(Lwebtrekk/android/sdk/data/entity/TrackRequest;Ljava/util/List;)Lwebtrekk/android/sdk/data/entity/DataTrack; = Copy(Webtrekk.Android.Sdk.Data.Entity.TrackRequest, System.Collections.Generic.IList<Webtrekk.Android.Sdk.Data.Entity.CustomParam>)
webtrekk/android/sdk/data/entity/TrackRequest = Webtrekk.Android.Sdk.Data.Entity.TrackRequest
  getApiLevel()Ljava/lang/String; = ApiLevel
  getAppFirstOpen()Ljava/lang/String; = AppFirstOpen
  getAppVersionCode()Ljava/lang/String; = AppVersionCode
  getAppVersionName()Ljava/lang/String; = AppVersionName
  getCountry()Ljava/lang/String; = Country
  getDeviceManufacturer()Ljava/lang/String; = DeviceManufacturer
  getDeviceModel()Ljava/lang/String; = DeviceModel
  getForceNewSession()Ljava/lang/String; = ForceNewSession
  getId()J = Id
  setId(J)V = Id
  getLanguage()Ljava/lang/String; = Language
  getName()Ljava/lang/String; = Name
  getOsVersion()Ljava/lang/String; = OsVersion
  getScreenResolution()Ljava/lang/String; = ScreenResolution
  getTimeStamp()Ljava/lang/String; = TimeStamp
  getTimeZone()Ljava/lang/String; = TimeZone
  getWebtrekkVersion()Ljava/lang/String; = WebtrekkVersion
  component1()J = Component1()
  component10()Ljava/lang/String; = Component10()
  component11()Ljava/lang/String; = Component11()
  component12()Ljava/lang/String; = Component12()
  component13()Ljava/lang/String; = Component13()
  component14()Ljava/lang/String; = Component14()
  component15()Ljava/lang/String; = Component15()
  component16()Ljava/lang/String; = Component16()
  component17()Lwebtrekk/android/sdk/data/entity/TrackRequest$RequestState; = Component17()
  component2()Ljava/lang/String; = Component2()
  component3()Ljava/lang/String; = Component3()
  component4()Ljava/lang/String; = Component4()
  component5()Ljava/lang/String; = Component5()
  component6()Ljava/lang/String; = Component6()
  component7()Ljava/lang/String; = Component7()
  component8()Ljava/lang/String; = Component8()
  component9()Ljava/lang/String; = Component9()
  getRequestState()Lwebtrekk/android/sdk/data/entity/TrackRequest$RequestState; = GetRequestState()
webtrekk/android/sdk/data/repository/CustomParamRepository = Webtrekk.Android.Sdk.Data.Repository.ICustomParamRepository
webtrekk/android/sdk/data/repository/CustomParamRepositoryImpl = Webtrekk.Android.Sdk.Data.Repository.CustomParamRepositoryImpl
  <init>(Lwebtrekk/android/sdk/data/dao/CustomParamDao;)V = .ctor(Webtrekk.Android.Sdk.Data.Dao.ICustomParamDao)
webtrekk/android/sdk/data/repository/TrackRequestRepository = Webtrekk.Android.Sdk.Data.Repository.ITrackRequestRepository
webtrekk/android/sdk/data/repository/TrackRequestRepositoryImpl = Webtrekk.Android.Sdk.Data.Repository.TrackRequestRepositoryImpl
  <init>(Lwebtrekk/android/sdk/data/dao/TrackRequestDao;)V = .ctor(Webtrekk.Android.Sdk.Data.Dao.ITrackRequestDao)
webtrekk/android/sdk/data/WebtrekkDatabaseKt = Webtrekk.Android.Sdk.Data.WebtrekkDatabaseKt
webtrekk/android/sdk/data/WebtrekkSharedPrefs = Webtrekk.Android.Sdk.Data.WebtrekkSharedPrefs
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  APP_FIRST_OPEN = AppFirstOpen
  APP_VERSION = AppVersion
  Companion = Companion
  EVER_ID_KEY = EverIdKey
  NEW_SESSION_KEY = NewSessionKey
  SHARED_PREFS_NAME = SharedPrefsName
  USER_OPT_OUT = UserOptOut
  getAppFirstOpen()Ljava/lang/String; = AppFirstOpen
  setAppFirstOpen(Ljava/lang/String;)V = AppFirstOpen
  getAppVersion()Ljava/lang/String; = AppVersion
  setAppVersion(Ljava/lang/String;)V = AppVersion
  getEverId()Ljava/lang/String; = EverId
  setEverId(Ljava/lang/String;)V = EverId
  getFns()Ljava/lang/String; = Fns
  setFns(Ljava/lang/String;)V = Fns
  getOptOut()Z = OptOut
  setOptOut(Z)V = OptOut
  getSharedPreferences()Landroid/content/SharedPreferences; = SharedPreferences
  contains(Ljava/lang/String;)Z = Contains(string)
webtrekk/android/sdk/DefaultConfiguration = Webtrekk.Android.Sdk.DefaultConfiguration
  AUTO_TRACK_ENABLED = AutoTrackEnabled
  FRAGMENTS_AUTO_TRACK_ENABLED = FragmentsAutoTrackEnabled
  INSTANCE = Instance
  REQUESTS_INTERVAL = RequestsInterval
  getLOG_LEVEL_VALUE()Lwebtrekk/android/sdk/Logger$Level; = LOG_LEVEL_VALUE
  getTIME_UNIT_VALUE()Ljava/util/concurrent/TimeUnit; = TIME_UNIT_VALUE
webtrekk/android/sdk/domain/external/AutoTrack = Webtrekk.Android.Sdk.Domain.External.AutoTrack
  getKoin()Lorg/koin/core/KoinContext; = Koin
  invoke(Lwebtrekk/android/sdk/domain/external/AutoTrack$Params;Lwebtrekk/android/sdk/util/CoroutineDispatchers;)V = Invoke(Webtrekk.Android.Sdk.Domain.External.AutoTrack.Params, Webtrekk.Android.Sdk.Util.CoroutineDispatchers)
webtrekk/android/sdk/domain/external/ManualTrack = Webtrekk.Android.Sdk.Domain.External.ManualTrack
  getKoin()Lorg/koin/core/KoinContext; = Koin
  invoke(Lwebtrekk/android/sdk/domain/external/ManualTrack$Params;Lwebtrekk/android/sdk/util/CoroutineDispatchers;)V = Invoke(Webtrekk.Android.Sdk.Domain.External.ManualTrack.Params, Webtrekk.Android.Sdk.Util.CoroutineDispatchers)
webtrekk/android/sdk/domain/external/Optout = Webtrekk.Android.Sdk.Domain.External.Optout
  isActive()Z = IsActive
  getKoin()Lorg/koin/core/KoinContext; = Koin
  invoke(Lwebtrekk/android/sdk/domain/external/Optout$Params;Lwebtrekk/android/sdk/util/CoroutineDispatchers;)V = Invoke(Webtrekk.Android.Sdk.Domain.External.Optout.Params, Webtrekk.Android.Sdk.Util.CoroutineDispatchers)
webtrekk/android/sdk/domain/external/TrackCustomEvent = Webtrekk.Android.Sdk.Domain.External.TrackCustomEvent
  getKoin()Lorg/koin/core/KoinContext; = Koin
  invoke(Lwebtrekk/android/sdk/domain/external/TrackCustomEvent$Params;Lwebtrekk/android/sdk/util/CoroutineDispatchers;)V = Invoke(Webtrekk.Android.Sdk.Domain.External.TrackCustomEvent.Params, Webtrekk.Android.Sdk.Util.CoroutineDispatchers)
webtrekk/android/sdk/domain/external/TrackCustomPage = Webtrekk.Android.Sdk.Domain.External.TrackCustomPage
  getKoin()Lorg/koin/core/KoinContext; = Koin
  invoke(Lwebtrekk/android/sdk/domain/external/TrackCustomPage$Params;Lwebtrekk/android/sdk/util/CoroutineDispatchers;)V = Invoke(Webtrekk.Android.Sdk.Domain.External.TrackCustomPage.Params, Webtrekk.Android.Sdk.Util.CoroutineDispatchers)
webtrekk/android/sdk/domain/ExternalInteractor = Webtrekk.Android.Sdk.Domain.IExternalInteractor
  invoke(Ljava/lang/Object;Lwebtrekk/android/sdk/util/CoroutineDispatchers;)V = Invoke(Java.Lang.Object, Webtrekk.Android.Sdk.Util.CoroutineDispatchers)
webtrekk/android/sdk/domain/internal/CacheTrackRequest = Webtrekk.Android.Sdk.Domain.Internal.CacheTrackRequest
  <init>(Lwebtrekk/android/sdk/data/repository/TrackRequestRepository;)V = .ctor(Webtrekk.Android.Sdk.Data.Repository.ITrackRequestRepository)
webtrekk/android/sdk/domain/internal/CacheTrackRequestWithCustomParams = Webtrekk.Android.Sdk.Domain.Internal.CacheTrackRequestWithCustomParams
  <init>(Lwebtrekk/android/sdk/data/repository/TrackRequestRepository;Lwebtrekk/android/sdk/data/repository/CustomParamRepository;)V = .ctor(Webtrekk.Android.Sdk.Data.Repository.ITrackRequestRepository, Webtrekk.Android.Sdk.Data.Repository.ICustomParamRepository)
webtrekk/android/sdk/domain/internal/ClearTrackRequests = Webtrekk.Android.Sdk.Domain.Internal.ClearTrackRequests
  <init>(Lwebtrekk/android/sdk/data/repository/TrackRequestRepository;)V = .ctor(Webtrekk.Android.Sdk.Data.Repository.ITrackRequestRepository)
webtrekk/android/sdk/domain/internal/ExecuteRequest = Webtrekk.Android.Sdk.Domain.Internal.ExecuteRequest
  <init>(Lwebtrekk/android/sdk/data/repository/TrackRequestRepository;Lwebtrekk/android/sdk/api/datasource/SyncRequestsDataSource;)V = .ctor(Webtrekk.Android.Sdk.Data.Repository.ITrackRequestRepository, Webtrekk.Android.Sdk.Api.Datasource.ISyncRequestsDataSource)
webtrekk/android/sdk/domain/internal/GetCachedDataTracks = Webtrekk.Android.Sdk.Domain.Internal.GetCachedDataTracks
  <init>(Lwebtrekk/android/sdk/data/repository/TrackRequestRepository;)V = .ctor(Webtrekk.Android.Sdk.Data.Repository.ITrackRequestRepository)
webtrekk/android/sdk/domain/InternalInteractor = Webtrekk.Android.Sdk.Domain.IInternalInteractor
webtrekk/android/sdk/extension/ActivityExtensionKt = Webtrekk.Android.Sdk.Extension.ActivityExtensionKt
  toTrackRequest(Landroid/app/Activity;)Lwebtrekk/android/sdk/data/entity/TrackRequest; = ToTrackRequest(Android.App.Activity)
webtrekk/android/sdk/extension/ContextExtensionKt = Webtrekk.Android.Sdk.Extension.ContextExtensionKt
  getAppVersionCode(Landroid/content/Context;)Ljava/lang/String; = GetAppVersionCode(Android.Content.Context)
  getAppVersionName(Landroid/content/Context;)Ljava/lang/String; = GetAppVersionName(Android.Content.Context)
  isPortrait(Landroid/content/Context;)Z = IsPortrait(Android.Content.Context)
  resolution(Landroid/content/Context;)Ljava/lang/String; = Resolution(Android.Content.Context)
webtrekk/android/sdk/extension/DataExtensionKt = Webtrekk.Android.Sdk.Extension.DataExtensionKt
  buildCustomParams(Ljava/util/List;)Ljava/lang/String; = BuildCustomParams(System.Collections.Generic.IList<Webtrekk.Android.Sdk.Data.Entity.CustomParam>)
  buildUrl(Lwebtrekk/android/sdk/data/entity/DataTrack;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;)Ljava/lang/String; = BuildUrl(Webtrekk.Android.Sdk.Data.Entity.DataTrack, string, System.Collections.Generic.IList<string>, string)
  getUserAgent(Lwebtrekk/android/sdk/data/entity/TrackRequest;)Ljava/lang/String; = GetUserAgent(Webtrekk.Android.Sdk.Data.Entity.TrackRequest)
  getWebtrekkRequestParams(Lwebtrekk/android/sdk/data/entity/TrackRequest;)Ljava/lang/String; = GetWebtrekkRequestParams(Webtrekk.Android.Sdk.Data.Entity.TrackRequest)
  toCustomParams(Ljava/util/Map;J)Ljava/util/List; = ToCustomParams(System.Collections.Generic.IDictionary<string, string>, long)
webtrekk/android/sdk/extension/DelegatesExtensionKt = Webtrekk.Android.Sdk.Extension.DelegatesExtensionKt
webtrekk/android/sdk/extension/ExtensionKt = Webtrekk.Android.Sdk.Extension.ExtensionKt
  encodeToUTF8(Ljava/lang/String;)Ljava/lang/String; = EncodeToUTF8(string)
  validateEntireList(Ljava/util/List;Ljava/lang/Object;)Ljava/util/List; = ValidateEntireList(System.Collections.IList, Java.Lang.Object)
webtrekk/android/sdk/extension/OkHttpExtensionKt = Webtrekk.Android.Sdk.Extension.OkHttpExtensionKt
webtrekk/android/sdk/Logger = Webtrekk.Android.Sdk.ILogger
  debug(Ljava/lang/String;)V = Debug(string)
  error(Ljava/lang/String;)V = Error(string)
  info(Ljava/lang/String;)V = Info(string)
  warn(Ljava/lang/String;)V = Warn(string)
webtrekk/android/sdk/module/DependencyModuleKt = Webtrekk.Android.Sdk.Module.DependencyModuleKt
webtrekk/android/sdk/Param = Webtrekk.Android.Sdk.Param
  CUSTOMER_ID = CustomerId
  INSTANCE = Instance
  INTERNAL_SEARCH = InternalSearch
  MEDIA_CODE = MediaCode
  ORDER_ID = OrderId
  ORDER_VALUE = OrderValue
  PRODUCT_COST = ProductCost
  PRODUCT_CURRENCY = ProductCurrency
  PRODUCT_NAME = ProductName
  PRODUCT_QUANTITY = ProductQuantity
  STATUS_OF_SHOPPING_CARD = StatusOfShoppingCard
webtrekk/android/sdk/ParamType = Webtrekk.Android.Sdk.ParamType
  CAMPAIGN_PARAM = CampaignParam
  ECOMMERCE_PARAM = EcommerceParam
  EVENT_PARAM = EventParam
  PAGE_CATEGORY = PageCategory
  PAGE_PARAM = PageParam
  PRODUCT_CATEGORY = ProductCategory
  SESSION_PARAM = SessionParam
  URM_CATEGORY = UrmCategory
  getValue()Ljava/lang/String; = Value
  valueOf(Ljava/lang/String;)Lwebtrekk/android/sdk/ParamType; = ValueOf(string)
  values()[Lwebtrekk/android/sdk/ParamType; = Values()
webtrekk/android/sdk/ParamTypeKt = Webtrekk.Android.Sdk.ParamTypeKt
  createCustomParam(Lwebtrekk/android/sdk/ParamType;I)Ljava/lang/String; = CreateCustomParam(Webtrekk.Android.Sdk.ParamType, int)
webtrekk/android/sdk/util/CoroutineDispatchers = Webtrekk.Android.Sdk.Util.CoroutineDispatchers
webtrekk/android/sdk/util/CoroutinesKt = Webtrekk.Android.Sdk.Util.CoroutinesKt
webtrekk/android/sdk/util/RoomUtilKt = Webtrekk.Android.Sdk.Util.RoomUtilKt
  buildRoomDatabase(Landroid/content/Context;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object; = BuildRoomDatabase(Android.Content.Context, string, Java.Lang.Class)
webtrekk/android/sdk/util/UtilKt = Webtrekk.Android.Sdk.Util.UtilKt
  getCurrentApiLevel()I = CurrentApiLevel
  getCurrentCountry()Ljava/lang/String; = CurrentCountry
  getCurrentDeviceManufacturer()Ljava/lang/String; = CurrentDeviceManufacturer
  getCurrentDeviceModel()Ljava/lang/String; = CurrentDeviceModel
  getCurrentLanguage()Ljava/lang/String; = CurrentLanguage
  getCurrentOsVersion()Ljava/lang/String; = CurrentOsVersion
  getCurrentTimeStamp()J = CurrentTimeStamp
  getCurrentTimeZone()I = CurrentTimeZone
  getCurrentWebtrekkVersion()Ljava/lang/String; = CurrentWebtrekkVersion
webtrekk/android/sdk/util/WebtrekkUtilKt = Webtrekk.Android.Sdk.Util.WebtrekkUtilKt
  getAppFirstOpen()Ljava/lang/String; = AppFirstOpen
  getAppUpdated()Z = AppUpdated
  getCurrentEverId()Ljava/lang/String; = CurrentEverId
  getCurrentSession()Ljava/lang/String; = CurrentSession
  getTrackDomain()Ljava/lang/String; = TrackDomain
  getTrackIds()Ljava/util/List; = TrackIds
  generateEverId()Ljava/lang/String; = GenerateEverId()
webtrekk/android/sdk/Webtrekk = Webtrekk.Android.Sdk.Webtrekk
  <init>()V = .ctor()
  Companion = Companion
  getEverId()Ljava/lang/String; = EverId
  hasOptOut()Z = HasOptOut
  getInstance()Lwebtrekk/android/sdk/Webtrekk; = Instance
  init(Landroid/content/Context;Lwebtrekk/android/sdk/Config;)V = Init(Android.Content.Context, Webtrekk.Android.Sdk.IConfig)
  optOut(ZZ)V = OptOut(bool, bool)
  trackCustomEvent(Ljava/lang/String;Ljava/util/Map;)V = TrackCustomEvent(string, System.Collections.Generic.IDictionary<string, string>)
  trackCustomPage(Ljava/lang/String;Ljava/util/Map;)V = TrackCustomPage(string, System.Collections.Generic.IDictionary<string, string>)
  trackPage(Landroid/content/Context;Ljava/lang/String;Ljava/util/Map;)V = TrackPage(Android.Content.Context, string, System.Collections.Generic.IDictionary<string, string>)
webtrekk/android/sdk/WebtrekkConfiguration = Webtrekk.Android.Sdk.WebtrekkConfiguration
  getAutoTracking()Z = AutoTracking
  getFragmentsAutoTracking()Z = FragmentsAutoTracking
  getLogLevel()Lwebtrekk/android/sdk/Logger$Level; = LogLevel
  getRequestsInterval()J = RequestsInterval
  getTrackDomain()Ljava/lang/String; = TrackDomain
  getTrackIds()Ljava/util/List; = TrackIds
webtrekk/android/sdk/WebtrekkWebInterface = Webtrekk.Android.Sdk.WebtrekkWebInterface
  <init>(Lwebtrekk/android/sdk/Webtrekk;)V = .ctor(Webtrekk.Android.Sdk.Webtrekk)
  Companion = Companion
  TAG = Tag
  getEverId()Ljava/lang/String; = EverId
  trackCustomEvent(Ljava/lang/String;Ljava/lang/String;)V = TrackCustomEvent(string, string)
  trackCustomPage(Ljava/lang/String;Ljava/lang/String;)V = TrackCustomPage(string, string)
